{"version":3,"sources":["constants/index.ts","utils/gravity.ts","lib/Mover.ts","utils/colors.ts","lib/Scene.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initOptions","framerate","G","startSpeed","moverCount","trailsDisplay","trailsLength","minMass","maxMass","density","MASS_FACTOR","o1","o2","force","Vector3","subVectors","location","distance","Math","sqrt","length","normalize","strength","mass","multiplyScalar","Mover","velocity","id","scene","uid","acceleration","alive","geometry","vertices","line","color","basicMaterial","selectionLight","mesh","position","parentScene","this","SphereGeometry","Line","Color","random","MeshPhongMaterial","specular","shininess","PointLight","copy","Mesh","castShadow","receiveShadow","add","f","divideScalar","splice","push","clone","otherMover","newMass","newLocation","x","y","z","newVelocity","kill","Gravity","applyForce","intensity","remove","totalMass","scale","PI","emissiveColor","getHex","toString","percent","parseInt","slice","t","p","R","B","round","darken","emissive","setHex","Geometry","verticesNeedUpdate","shift","material","Scene","element","rootElement","size","camSettings","currentRadius","options","startTime","renderInterval","now","deltaT","camera","renderer","controls","movers","w","window","innerWidth","h","innerHeight","fov","aspect","near","far","reset","Date","ThreeScene","PerspectiveCamera","WebGLRenderer","preserveDrawingBuffer","antialias","setSize","setClearColor","OrbitControls","domElement","enableDamping","dampingFactor","rotateSpeed","append","directionalLight","DirectionalLight","set","axisHelper","AxesHelper","setCamera","draw","forEach","v","i","getRandomize","maxDistance","maxSpeed","addMover","requestAnimationFrame","render","calcMovers","update","updateTrace","lookAt","updateMatrix","mover","showTrace","j","distanceTo","eat","attract","updateMovers","display","min","max","App","ref","useRef","useEffect","current","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.632be29f.chunk.js","sourcesContent":["export interface SceneOptions {\n  framerate: number;\n  G: number;\n  startSpeed: number;\n  moverCount: number;\n  trailsDisplay: boolean;\n  trailsLength: number;\n  minMass: number;\n  maxMass: number;\n  density: number;\n  reset?: () => void;\n}\nexport const initOptions: SceneOptions = {\n  framerate: 60,\n  G: 250,\n  startSpeed: 30,\n  moverCount: 40,\n  trailsDisplay: true,\n  trailsLength: 100,\n  minMass: 400,\n  maxMass: 3000,\n  density: 0.15,\n};\n\nexport const G = 6.6742e-11;\n\nexport const SPHERE_SIDES = 20;\nexport const MASS_FACTOR = 0.01;\n","import { Vector3 } from 'three';\nimport { Mover } from '../lib/Mover';\n\nexport default {\n  calcG(o1: Mover, o2: Mover, G: number) {\n    let force = new Vector3().subVectors(o1.location, o2.location);\n    const distance = Math.sqrt(force.length() ** 2);\n\n    force = force.normalize();\n    const strength = -(G * o1.mass * o2.mass) / distance ** 2;\n\n    return force.multiplyScalar(strength);\n  },\n};\n","import { SPHERE_SIDES, MASS_FACTOR } from '../constants';\nimport {\n  Vector3,\n  SphereGeometry,\n  Line,\n  MeshPhongMaterial,\n  PointLight,\n  Mesh,\n  Geometry,\n  Scene,\n  Light,\n  Color,\n} from 'three';\nimport { darken } from '../utils/colors';\nimport Gravity from '../utils/gravity';\n\nexport class Mover {\n  public uid: string;\n  public location: Vector3;\n  public velocity: Vector3;\n  public acceleration: Vector3;\n  public mass: number;\n  public alive: boolean;\n  public geometry: Geometry;\n  public vertices: Vector3[];\n  public line: Line;\n  public color: Color;\n  public basicMaterial: MeshPhongMaterial;\n  public selectionLight: Light;\n  public mesh: Mesh;\n  public position: Vector3;\n  public parentScene: Scene;\n\n  constructor(mass: number, velocity: Vector3, location: Vector3, id: string, scene: Scene) {\n    this.uid = `mover-${id}`;\n    this.location = location;\n    this.velocity = velocity;\n    this.acceleration = new Vector3(0.0, 0.0, 0.0);\n    this.mass = mass;\n    this.alive = true;\n    this.geometry = new SphereGeometry(100, SPHERE_SIDES, SPHERE_SIDES);\n    this.vertices = [];\n    this.line = new Line();\n    this.color = new Color(Math.random() * 0xffffff);\n    this.basicMaterial = new MeshPhongMaterial({\n      color: this.color,\n      specular: this.color,\n      shininess: 10,\n    });\n\n    this.selectionLight = new PointLight(this.color, 0.1);\n    this.selectionLight.position.copy(this.location);\n\n    this.mesh = new Mesh(this.geometry, this.basicMaterial);\n    this.mesh.castShadow = false;\n    this.mesh.receiveShadow = true;\n\n    this.position = this.location;\n\n    this.parentScene = scene;\n  }\n\n  addMover() {\n    this.parentScene.add(this.mesh);\n    this.parentScene.add(this.selectionLight);\n    this.parentScene.add(this.line);\n  }\n\n  applyForce(force: Vector3) {\n    if (!this.mass) this.mass = 1.0;\n    const f = force.divideScalar(this.mass);\n    this.acceleration.add(f);\n  }\n\n  update() {\n    this.velocity.add(this.acceleration);\n    this.location.add(this.velocity);\n    this.acceleration.multiplyScalar(0);\n\n    this.selectionLight.position.copy(this.location);\n    this.mesh.position.copy(this.location);\n\n    if (this.vertices.length > 10000) this.vertices.splice(0, 1);\n    this.vertices.push(this.location.clone());\n  }\n\n  eat(otherMover: Mover) {\n    const newMass = this.mass + otherMover.mass;\n    const newLocation = new Vector3(\n      (this.location.x * this.mass + otherMover.location.x * otherMover.mass) / newMass,\n      (this.location.y * this.mass + otherMover.location.y * otherMover.mass) / newMass,\n      (this.location.z * this.mass + otherMover.location.z * otherMover.mass) / newMass\n    );\n\n    const newVelocity = new Vector3(\n      (this.velocity.x * this.mass + otherMover.velocity.x * otherMover.mass) / newMass,\n      (this.velocity.y * this.mass + otherMover.velocity.y * otherMover.mass) / newMass,\n      (this.velocity.z * this.mass + otherMover.velocity.z * otherMover.mass) / newMass\n    );\n\n    this.location = newLocation;\n    this.velocity = newVelocity;\n    this.mass = newMass;\n\n    otherMover.kill();\n  }\n\n  attract(otherMover: Mover, G: number) {\n    const force = Gravity.calcG(this, otherMover, G);\n\n    this.applyForce(force);\n  }\n\n  kill() {\n    this.alive = false;\n    this.selectionLight.intensity = 0;\n    this.parentScene.remove(this.mesh);\n  }\n\n  display(totalMass: number) {\n    if (this.alive) {\n      const scale = ((this.mass * MASS_FACTOR) / (4 * Math.PI)) ** (1 / 3);\n      this.mesh.scale.x = scale;\n      this.mesh.scale.y = scale;\n      this.mesh.scale.z = scale;\n\n      this.selectionLight.intensity = (2 * this.mass) / totalMass;\n\n      let emissiveColor = this.color.getHex().toString(16);\n      emissiveColor = darken(emissiveColor, -1 + this.mass / totalMass);\n\n      this.basicMaterial.emissive.setHex(parseInt(emissiveColor, 16));\n    } else {\n      this.selectionLight.intensity = 0;\n    }\n  }\n\n  showTrace(trailsLength: number) {\n    this.parentScene.remove(this.line);\n    const geometry = new Geometry();\n    geometry.vertices = this.vertices.slice();\n    geometry.verticesNeedUpdate = true;\n\n    if (!this.alive) this.vertices.shift();\n    while (geometry.vertices.length > trailsLength) {\n      geometry.vertices.shift();\n    }\n    this.line = new Line(geometry, this.line.material);\n    this.parentScene.add(this.line);\n  }\n}\n","export function darken(color: string, percent: number) {\n  const f = parseInt(color.slice(1), 16);\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent - 1 : percent;\n  const R = f >> 16;\n  const G = (f >> 8) & 0x00ff;\n  const B = f & 0x0000ff;\n\n  return (\n    0x1000000 +\n    (Math.round((t - R) * p) + R) * 0x10000 +\n    (Math.round((t - G) * p) + G) * 0x100 +\n    (Math.round((t - B) * p) + B)\n  )\n    .toString(16)\n    .slice(1);\n}\n","import { initOptions, MASS_FACTOR, SceneOptions } from '../constants';\nimport {\n  Scene as ThreeScene,\n  PerspectiveCamera,\n  WebGLRenderer,\n  Vector3,\n  DirectionalLight,\n  AxesHelper,\n} from 'three';\nimport { OrbitControls } from 'three-orbitcontrols-ts';\nimport { Mover } from './Mover';\n\nexport class Scene {\n  public rootElement: HTMLElement;\n  public size: { w: number; h: number };\n  public camSettings: Pick<PerspectiveCamera, 'fov' | 'aspect' | 'near' | 'far'>;\n  public currentRadius: number;\n  public options: SceneOptions;\n  public startTime: number;\n  public renderInterval: number;\n\n  public now = 0;\n  public deltaT = 0;\n\n  public scene: ThreeScene;\n  public camera: PerspectiveCamera;\n  public renderer: WebGLRenderer;\n  public controls: OrbitControls;\n\n  public totalMass: number;\n  public movers: Mover[];\n\n  constructor(element: HTMLElement) {\n    this.rootElement = element;\n    this.size = {\n      w: window.innerWidth,\n      h: window.innerHeight,\n    };\n    this.camSettings = {\n      fov: 40,\n      aspect: this.size.w / this.size.h,\n      near: 0.001,\n      far: 1000000000.0,\n    };\n    this.currentRadius = 12000.0;\n    this.options = initOptions;\n    this.options.reset = () => {\n      this.reset();\n    };\n\n    this.startTime = this.now = Date.now();\n    this.renderInterval = 1000 / this.options.framerate;\n\n    this.scene = new ThreeScene();\n    this.camera = new PerspectiveCamera(\n      this.camSettings.fov,\n      this.camSettings.aspect,\n      this.camSettings.near,\n      this.camSettings.far\n    );\n\n    this.renderer = new WebGLRenderer({\n      preserveDrawingBuffer: true,\n      antialias: true,\n    });\n    this.renderer.setSize(this.size.w, this.size.h);\n    this.renderer.setClearColor(0x000000);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.enableDamping = true;\n    this.controls.dampingFactor = 0.08;\n    this.controls.rotateSpeed = 0.3;\n\n    this.rootElement.append(this.renderer.domElement);\n\n    this.totalMass = 0;\n    this.movers = [];\n\n    /*test*/\n    const directionalLight = new DirectionalLight(0x666666);\n    directionalLight.position.set(1000, 1000, 1000);\n    directionalLight.castShadow = true;\n\n    const axisHelper = new AxesHelper(10000);\n    this.scene.add(axisHelper);\n\n    this.setCamera();\n    this.draw();\n    this.reset();\n  }\n\n  reset() {\n    let movers = this.movers;\n\n    if (movers) {\n      // CLEAR MOVER LIST\n      movers.forEach((v) => {\n        this.scene.remove(v.mesh);\n        this.scene.remove(v.selectionLight);\n        this.scene.remove(v.line);\n      });\n    }\n\n    movers = [];\n    for (let i = 0; i < this.options.moverCount; i++) {\n      const mass = this.getRandomize(this.options.minMass, this.options.maxMass),\n        maxDistance = 1000 / this.options.density,\n        maxSpeed = this.options.startSpeed;\n\n      const velocity = new Vector3(\n        this.getRandomize(-maxSpeed, maxSpeed),\n        this.getRandomize(-maxSpeed, maxSpeed),\n        this.getRandomize(-maxSpeed, maxSpeed)\n      );\n      const location = new Vector3(\n        this.getRandomize(-maxDistance, maxDistance),\n        this.getRandomize(-maxDistance, maxDistance),\n        this.getRandomize(-maxDistance, maxDistance)\n      );\n\n      movers.push(new Mover(mass, velocity, location, `mover-${i}`, this.scene));\n    }\n\n    movers.forEach((v) => {\n      v.addMover();\n    });\n\n    this.movers = movers;\n  }\n\n  draw() {\n    window.requestAnimationFrame(() => {\n      this.draw();\n    });\n    this.now = Date.now();\n    this.deltaT = this.now - this.startTime;\n\n    if (this.deltaT > this.renderInterval) {\n      this.startTime = this.now - (this.deltaT % this.renderInterval);\n      this.render();\n    }\n  }\n\n  render() {\n    this.totalMass = 0;\n\n    if (this.movers.length > 0) {\n      this.calcMovers();\n    }\n\n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  setCamera() {\n    this.movers.forEach((v) => {\n      this.updateTrace(v);\n    });\n\n    this.camera.position.set(this.currentRadius, this.currentRadius, this.currentRadius);\n    this.camera.lookAt(new Vector3());\n    this.camera.updateMatrix();\n  }\n\n  updateTrace(mover: Mover) {\n    if (this.options.trailsDisplay) {\n      mover.showTrace(this.options.trailsLength);\n    }\n  }\n\n  calcMovers() {\n    const movers = this.movers;\n\n    movers.forEach((o1, i) => {\n      if (!o1.alive) return false;\n      if (o1.alive) {\n        this.totalMass += o1.mass;\n        movers.forEach((o2, j) => {\n          if (o1.alive && o2.alive && i !== j) {\n            const distance = o1.location.distanceTo(o2.location);\n            const r1 = (o1.mass / MASS_FACTOR / MASS_FACTOR / (4 * Math.PI)) ** (1 / 3),\n              r2 = (o2.mass / MASS_FACTOR / MASS_FACTOR / (4 * Math.PI)) ** (1 / 3);\n\n            if (distance <= r1 + r2) o2.eat(o1);\n            else o2.attract(o1, this.options.G);\n          }\n        });\n      }\n    });\n\n    this.updateMovers();\n  }\n\n  updateMovers() {\n    const movers = this.movers;\n    for (let i = movers.length - 1; i >= 0; i--) {\n      const mover = movers[i];\n      if (mover.alive) {\n        mover.update();\n        mover.display(this.totalMass);\n      }\n\n      this.updateTrace(mover);\n    }\n  }\n\n  getRandomize(min: number, max: number) {\n    return Math.random() * (max - min) + min;\n  }\n}\n","import React, { useEffect, useRef } from 'react';\nimport './App.css';\nimport { Scene } from './lib/Scene';\n\nfunction App() {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (ref.current != null) {\n      const target = ref.current;\n      new Scene(target);\n    }\n  }, []);\n  return <div ref={ref} />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}